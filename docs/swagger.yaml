basePath: /v1
definitions:
  main.CreateUserTokenPayload:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 72
        minLength: 3
        type: string
    required:
    - email
    - password
    type: object
  main.PostCellPayload:
    properties:
      arfcn:
        type: integer
      c_i:
        type: number
      cell_identity:
        type: integer
      cell_tech:
        type: string
      ecn0:
        type: number
      frequency_band:
        type: string
      frequency_mhz:
        type: number
      generated_at:
        type: string
      lac:
        type: integer
      lat:
        type: number
      long:
        type: number
      plmn:
        type: string
      rac:
        type: integer
      rscp:
        type: integer
      rsrp:
        type: integer
      rsrq:
        type: number
      rxlev:
        type: integer
      rxqual:
        type: integer
      sinr:
        type: number
      tac:
        type: integer
    type: object
  main.RegisterUserPayload:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 72
        minLength: 3
        type: string
      username:
        maxLength: 100
        type: string
    required:
    - email
    - password
    - username
    type: object
  store.Cell:
    properties:
      arfcn:
        type: integer
      c_i:
        type: number
      cell_identity:
        type: integer
      cell_tech:
        type: string
      created_at:
        type: string
      ecn0:
        type: number
      frequency_band:
        type: string
      frequency_mhz:
        type: number
      generated_at:
        type: string
      id:
        type: integer
      lac:
        type: integer
      lat:
        type: number
      long:
        type: number
      plmn:
        type: string
      rac:
        type: integer
      rscp:
        type: integer
      rsrp:
        type: integer
      rsrq:
        type: number
      rxlev:
        type: integer
      rxqual:
        type: integer
      sinr:
        type: number
      tac:
        type: integer
      user_id:
        type: integer
    type: object
  store.Role:
    properties:
      description:
        type: string
      id:
        type: integer
      level:
        type: integer
      name:
        type: string
    type: object
  store.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      role:
        $ref: '#/definitions/store.Role'
      role_id:
        type: integer
      username:
        type: string
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: goTrain API
paths:
  /authentication/token:
    post:
      consumes:
      - application/json
      description: Creates a token for a user
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateUserTokenPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Token
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Creates a token
      tags:
      - authentication
  /authentication/user:
    post:
      consumes:
      - application/json
      description: Registers a user
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.RegisterUserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: User registered
          schema:
            $ref: '#/definitions/store.User'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Registers a user
      tags:
      - authentication
  /cells/:
    get:
      consumes:
      - application/json
      description: Fetches all cells
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Cell'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Fetches cells
      tags:
      - cell
    post:
      consumes:
      - application/json
      description: Adds the new data to Cell datas
      parameters:
      - description: cell params
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.PostCellPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Cell Created
          schema:
            $ref: '#/definitions/store.Cell'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Create Cell Data
      tags:
      - cell
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Fetches a user profile by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.User'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Fetches a user profile
      tags:
      - users
  /users/activate/{token}:
    put:
      description: Activate/Register a user by invitation token
      parameters:
      - description: Invation token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: User activated
          schema:
            type: string
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Activates/Register a user
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
